#! /usr/bin/python

# @file
# This file is part of SWE.
#
# @author Alexander Breuer
#  (breuera AT in.tum.de,
#   http://www5.in.tum.de/wiki/index.php/Dipl.-Math._Alexander_Breuer)
# @author Sebastian Rettenberger
#  (rettenbs AT in.tum.de,
#   http://www5.in.tum.de/wiki/index.php/Sebastian_Rettenberger,_M.Sc.)
#
# @section LICENSE
#
# SWE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SWE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SWE.  If not, see <http://www.gnu.org/licenses/>.
#
#
# @section DESCRIPTION
#
# Definition of the source files.
#

import sys
# Explicitly import SCons symbols for proper linting
# from SCons.Script import (env, Exit, Export, Import)
from SCons.Script import (Exit, Export, Import)

Import('env')

# MPI
if env['parallelization'] in ['mpi', 'ampi']:
    sourceFiles = ['blocks/SWE_DimensionalSplittingMpi.cpp']
# UPCXX
elif env['parallelization'] in ['upcxx']:
    # TODO works with which solvers?
    sourceFiles = ['blocks/SWE_DimensionalSplittingUpcxx.cpp']
# CHARM++
elif env['parallelization'] in ['charm']:
    # TODO works with which solvers?
    sourceFilesCharm = ['blocks/SWE_DimensionalSplittingCharm.ci']
    sourceFiles = ['blocks/SWE_DimensionalSplittingCharm.cpp']
# Other Code without CUDA
elif env['parallelization'] not in ['cuda', 'mpi_with_cuda']:
    if env['solver'] == 'rusanov':
        sourceFiles = ['blocks/rusanov/SWE_RusanovBlock.cpp']
    elif env['solver'] == 'augrie_simd' or env['simdExtensions'] != 'NONE':
        sourceFiles = ['blocks/SWE_WavePropagationBlockSIMD.cpp']
    elif env['solver'] == 'augriefun' or env['solver'] == 'fwavevec':
        sourceFiles = ['blocks/SWE_WaveAccumulationBlock.cpp']
    else:
        sourceFiles = ['blocks/SWE_DimensionalSplitting.cpp']
# Code with CUDA
else:
    sourceFiles = ['blocks/cuda/SWE_BlockCUDA.cu',
                   'blocks/cuda/SWE_BlockCUDA_kernels.cu']
    if env['solver'] == 'rusanov':
        sourceFiles.append(['blocks/rusanov/SWE_RusanovBlockCUDA.cu',
                            'blocks/rusanov/SWE_RusanovBlockCUDA_kernels.cu']
                           )
    elif env['solver'] == 'fwave' or env['solver'] == 'augrie':
        sourceFiles.append(['blocks/cuda/SWE_WavePropagationBlockCuda.cu',
                            'blocks/cuda/SWE_WavePropagationBlockCuda_kernels.cu']
                           )
    if env['openGL']:
        sourceFiles.append(['opengl/simulation.cu'])

# compile the files defined so far,
# this is an important step because of possibly different compilers
#if env['parallelization'] == 'charm':
#    for i in sourceFilesCharm:
#        env.charmBuilder(i)
for i in sourceFiles:
    env.objects.append(env.Object(i))

# Logger is used in every implementation
#sourceFiles = ['tools/Logger.cpp']

# Logger is unused for now
sourceFiles = []

# OpenGL CPU-files
if env['openGL']:
    sourceFiles.append(['opengl/camera.cpp'])
    sourceFiles.append(['opengl/controller.cpp'])
    sourceFiles.append(['opengl/shader.cpp'])
    sourceFiles.append(['opengl/visualization.cpp'])
    sourceFiles.append(['opengl/vbo.cpp'])
    if env['openGL_instr']:
        sourceFiles.append(['opengl/text.cpp'])

# netCDF writer
if env['writeNetCDF']:
    sourceFiles.append(['writer/NetCdfWriter.cpp'])
else:
    sourceFiles.append(['writer/VtkWriter.cpp'])

# xml reader
if env['xmlRuntime']:
    sourceFiles.append(['tools/CXMLConfig.cpp'])

# file containing the main-function
if env['parallelization'] in ['none', 'cuda']:
    if env['solver'] != 'rusanov':
        if not env['openGL']:
            # If netCDF input files are used
            # TODO appending of the netCdfReader has to be done
            # elsewhere if this is supposed to work as a lib
            sourceFiles.append(['examples/swe_simple.cpp'])
        else:
            sourceFiles.append(['examples/swe_opengl.cpp'])
    else:
        print(sys.stderr,
              '** The selected configuration is not implemented.')
        Exit(1)
elif env['parallelization'] in ['mpi', 'ampi']:
    sourceFiles.append(['examples/swe_mpi.cpp'])
elif env['parallelization'] in ['mpi_with_cuda']:
    sourceFiles.append(['examples/swe_mpi_legacy.cpp'])
elif env['parallelization'] in ['upcxx']:
    sourceFiles.append(['examples/swe_upcxx.cpp'])
elif env['parallelization'] in ['charm']:
    sourceFilesCharm.append(['examples/swe_charm.ci'])
    sourceFiles.append(['examples/swe_charm.cpp'])
else:
    print(sys.stderr, '** The selected configuration is not implemented.')
    Exit(1)

# CPU compilation for sure
#if env['parallelization'] == 'charm':
#    for i in sourceFilesCharm:
#        env.charmBuilder(i)
for i in sourceFiles:
    env.objects.append(env.Object(i))

Export('env')
